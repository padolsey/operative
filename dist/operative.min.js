/** Operative v0.1.0 (c) 2013 James padolsey, MIT-licensed, http://github.com/padolsey/operative **/
(function(){function makeBlobURI(e){var r;try{r=new Blob([e],{type:"text/javascript"})}catch(t){r=new BlobBuilder,r.append(e),r=r.getBlob()}return URL.createObjectURL(r)}function Operative(e){var r=this;if("function"==typeof e){var t=new Operative({main:e});return function(){return t.main.apply(t,arguments)}}e.get=e.get||function(e){return this[e]},e.set=e.set||function(e,r){return this[e]=r},this._msgQueue=[],this._curToken=0,this.isDestroyed=!1,this.workerIsReady=!1,this.module=e,this.dataProperties={},this.api={},this.callbacks={},this.deferreds={},operative.hasWorkerSupport?this._setupWorker():this._setupFallback();for(var s in e)hasOwn.call(e,s)&&this._createExposedMethod(s);return this.api.__operative__=this,this.api.destroy=function(){return r.destroy()},this.api}function operative(e){return new Operative(e)}function workerBoilerScript(){var postMessage=self.postMessage,objectTransferSupport=null;self.console={},self.isWorker=!0,["log","debug","error","info","warn","time","timeEnd"].forEach(function(e){self.console[e]=function(){postMessage({cmd:"console",method:e,args:[].slice.call(arguments)})}}),self.addEventListener("message",function(e){function returnResult(e){postMessage({cmd:"result",token:data.token,result:e})}var data=e.data;if("string"==typeof data&&0===data.indexOf("EVAL|"))return eval(data.substring(5)),void 0;if(null==objectTransferSupport)return objectTransferSupport="PING"===e.data[0],self.postMessage(objectTransferSupport?"pingback:objectTransferSupport=YES":"pingback:objectTransferSupport=NO"),objectTransferSupport||(postMessage=function(e){return self.postMessage(JSON.stringify(e))}),void 0;objectTransferSupport||(data=JSON.parse(data));var defs=data.definitions;if(defs){for(var i in defs)self[i]=defs[i];return self.setup&&self.setup(),void 0}var isAsync=!1,isDeferred=!1;self.async=function(){return isAsync=!0,function(e){returnResult(e)}},self.deferred=function(){function e(e){return returnResult({isDeferred:!0,action:"fulfill",arg:e}),t}function r(e){returnResult({isDeferred:!0,action:"reject",arg:e})}isDeferred=!0;var t={};return t.fulfil=t.fulfill=e,t.reject=r,t};var result=self[data.method].apply(self,data.args);self.async=function(){throw Error("Operative: async() called at odd time")},self.deferred=function(){throw Error("Operative: deferred() called at odd time")},isAsync||isDeferred||returnResult(result)})}if("undefined"==typeof window&&self.importScripts)return workerBoilerScript(),void 0;var slice=[].slice,hasOwn={}.hasOwnProperty,scripts=document.getElementsByTagName("script"),opScript=scripts[scripts.length-1],opScriptURL=/operative/.test(opScript.src)&&opScript.src,URL=window.URL||window.webkitURL,BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder,workerViaBlobSupport=function(){try{new Worker(makeBlobURI(";"))}catch(e){return!1}return!0}();operative.hasWorkerSupport=!!window.Worker,operative.Promise=window.Promise,"undefined"!=typeof module&&module.exports?module.exports=operative:window.operative=operative,operative.setSelfURL=function(e){opScriptURL=e},Operative.prototype={_buildWorkerScript:function(e){var r,t=[],s=this.module,o=this.dataProperties;for(var i in s){var r=s[i];"function"==typeof r?t.push('   self["'+i.replace(/"/g,'\\"')+'"] = '+(""+r)+";"):o[i]=r}return t.join("\n")+(e?"\n("+(""+workerBoilerScript)+"());":"")},_onWorkerMessage:function(e){var r=e.data;if("string"==typeof r&&0===r.indexOf("pingback"))return"pingback:objectTransferSupport=NO"===r&&(this._marshal=function(e){return JSON.stringify(e)},this._demarshal=function(e){return JSON.parse(e)}),this.workerIsReady=!0,this._postQueudMessages(),void 0;switch(r=this._demarshal(r),r.cmd){case"console":window.console&&window.console[r.method].apply(window.console,r.args);break;case"result":var t=this.callbacks[r.token],s=this.deferreds[r.token];delete this.callbacks[r.token],delete this.deferreds[r.token];var o=r.result&&r.result.isDeferred&&r.result.action;s&&o?s[o](r.result.arg):t&&t(r.result)}},_marshal:function(e){return e},_demarshal:function(e){return e},_postWorkerMessage:function(e){return this.workerIsReady?this.worker.postMessage(this._marshal(e)):(this._msgQueue.push(e),void 0)},_postQueudMessages:function(){for(var e=this._msgQueue,r=0,t=e.length;t>r;++r)this._postWorkerMessage(e[r]);this._msgQueue=null},_setupWorker:function(){var e,r=this;if(workerViaBlobSupport)e=this.worker=new Worker(makeBlobURI(this._buildWorkerScript(!0)));else{if(!opScriptURL)throw Error("Operaritve: No operative.js URL available. Please set via operative.setSelfURL(...)");e=this.worker=new Worker(opScriptURL),e.postMessage("EVAL|"+this._buildWorkerScript(!1))}e.postMessage(["PING"]),e.addEventListener("message",function(e){r._onWorkerMessage(e)}),this._postWorkerMessage({definitions:this.dataProperties})},_createExposedMethod:function(e){var r=this;this.api[e]=function(){function t(t){var s=!1;r.module.async=function(){return s=!0,n},r.module.deferred=function(){return t};var o=r.module[e].apply(r.module,i);r.module.async=function(){throw Error("Operative: async() called at odd time")},s||t||n(o)}function s(){r._postWorkerMessage({method:e,args:i,token:o})}if(r.isDestroyed)throw Error("Operative: Cannot run method. Operative has already been destroyed");var o=++r._curToken,i=slice.call(arguments),n="function"==typeof i[i.length-1]&&i.pop();if(!n&&!operative.Promise)throw Error("Operative: No callback has been passed. Assumed that you want a promise. But `operative.Promise` is null. Please provide Promise polyfill/lib.");if(operative.hasWorkerSupport){if(n)r.callbacks[o]=n,s();else if(operative.Promise)return new operative.Promise(function(e){r.deferreds[o]=e,s()})}else if(n)setTimeout(function(){t()},1);else if(operative.Promise)return new operative.Promise(function(e){e.fulfil=e.fulfill,setTimeout(function(){t(e)},1)})}},_setupFallback:function(){this.module.isWorker=!1,this.module.setup&&this.module.setup()},destroy:function(){this.isDestroyed=!0,this.worker&&this.worker.terminate()}},operative.Operative=Operative})();